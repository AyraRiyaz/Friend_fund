{
  "info": {
    "name": "FriendFund API v2.0",
    "description": "Complete API collection for testing FriendFund backend endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "friend-fund-api-collection",
    "version": {
      "major": 2,
      "minor": 0,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://your-appwrite-function-url.com",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "campaignId",
      "value": "",
      "type": "string"
    },
    {
      "key": "contributionId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('userId', response.data.userId);",
                  "    pm.test('User registered successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.userId).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobileNumber\": \"+919876543210\",\n  \"upiId\": \"test@paytm\",\n  \"name\": \"Test User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user with mobile number, UPI ID, and name"
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('OTP sent successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.otp).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobileNumber\": \"+919876543210\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Send OTP to user's mobile number for login"
          }
        },
        {
          "name": "Verify OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.data.sessionToken);",
                  "    pm.collectionVariables.set('userId', response.data.user.userId);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.sessionToken).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobileNumber\": \"+919876543210\",\n  \"otp\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-otp"]
            },
            "description": "Verify OTP and get session token"
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('User profile retrieved', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.userId).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/user",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "user"]
            },
            "description": "Get current user profile"
          }
        }
      ]
    },
    {
      "name": "Campaigns",
      "item": [
        {
          "name": "Create Campaign",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('campaignId', response.data.campaignId);",
                  "    pm.test('Campaign created successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.campaignId).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Medical Emergency Fund\",\n  \"description\": \"Help needed for urgent medical treatment\",\n  \"purpose\": \"Medical\",\n  \"targetAmount\": 50000,\n  \"repaymentDueDate\": \"2025-12-31T23:59:59.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/campaigns",
              "host": ["{{baseUrl}}"],
              "path": ["campaigns"]
            },
            "description": "Create a new fundraising campaign"
          }
        },
        {
          "name": "Get Campaign Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Campaign details retrieved', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.campaignId).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/campaigns/{{campaignId}}",
              "host": ["{{baseUrl}}"],
              "path": ["campaigns", "{{campaignId}}"]
            },
            "description": "Get details of a specific campaign (public view)"
          }
        },
        {
          "name": "Get User Campaigns",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('User campaigns retrieved', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/campaigns",
              "host": ["{{baseUrl}}"],
              "path": ["campaigns"]
            },
            "description": "Get all campaigns created by the current user"
          }
        },
        {
          "name": "Update Campaign",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Campaign updated successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Medical Emergency Fund\",\n  \"description\": \"Updated description for urgent medical treatment\",\n  \"targetAmount\": 75000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/campaigns/{{campaignId}}",
              "host": ["{{baseUrl}}"],
              "path": ["campaigns", "{{campaignId}}"]
            },
            "description": "Update campaign details"
          }
        },
        {
          "name": "Close Campaign",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Campaign closed successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"closed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/campaigns/{{campaignId}}",
              "host": ["{{baseUrl}}"],
              "path": ["campaigns", "{{campaignId}}"]
            },
            "description": "Close a campaign to stop further contributions"
          }
        }
      ]
    },
    {
      "name": "Contributions",
      "item": [
        {
          "name": "Make Gift Contribution",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Gift contribution recorded', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.contributionId).to.exist;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"campaignId\": \"{{campaignId}}\",\n  \"contributorName\": \"John Doe\",\n  \"amount\": 5000,\n  \"utr\": \"UTR123456789\",\n  \"type\": \"gift\",\n  \"isAnonymous\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/contributions",
              "host": ["{{baseUrl}}"],
              "path": ["contributions"]
            },
            "description": "Make a gift contribution to a campaign"
          }
        },
        {
          "name": "Make Loan Contribution",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('contributionId', response.data.contributionId);",
                  "    pm.test('Loan contribution recorded', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.type).to.equal('loan');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"campaignId\": \"{{campaignId}}\",\n  \"contributorName\": \"Jane Smith\",\n  \"amount\": 10000,\n  \"utr\": \"UTR987654321\",\n  \"type\": \"loan\",\n  \"isAnonymous\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/contributions",
              "host": ["{{baseUrl}}"],
              "path": ["contributions"]
            },
            "description": "Make a loan contribution to a campaign"
          }
        },
        {
          "name": "Make Anonymous Contribution",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Anonymous contribution recorded', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"campaignId\": \"{{campaignId}}\",\n  \"contributorName\": \"Anonymous Donor\",\n  \"amount\": 2000,\n  \"utr\": \"UTR111222333\",\n  \"type\": \"gift\",\n  \"isAnonymous\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/contributions",
              "host": ["{{baseUrl}}"],
              "path": ["contributions"]
            },
            "description": "Make an anonymous contribution to a campaign"
          }
        },
        {
          "name": "Get Campaign Contributions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Contributions retrieved', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/campaigns/{{campaignId}}/contributions",
              "host": ["{{baseUrl}}"],
              "path": ["campaigns", "{{campaignId}}", "contributions"]
            },
            "description": "Get all contributions for a specific campaign"
          }
        },
        {
          "name": "Mark Loan as Repaid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Loan marked as repaid', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.repaymentStatus).to.equal('repaid');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/contributions/{{contributionId}}/repay",
              "host": ["{{baseUrl}}"],
              "path": ["contributions", "{{contributionId}}", "repay"]
            },
            "description": "Mark a loan contribution as repaid"
          }
        }
      ]
    },
    {
      "name": "API Info",
      "item": [
        {
          "name": "Get API Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API is running', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.service).to.equal('FriendFund API');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Get API information and available endpoints"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// This script runs before every request"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// This script runs after every request",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has correct structure', function () {",
          "    const response = pm.response.json();",
          "    pm.expect(response).to.have.property('success');",
          "    pm.expect(response).to.have.property('message');",
          "    pm.expect(response).to.have.property('timestamp');",
          "});"
        ]
      }
    }
  ]
}
