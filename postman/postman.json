{
  "info": {
    "_postman_id": "friendfund-api-collection",
    "name": "FriendFund API",
    "description": "Complete API collection for FriendFund Backend - A fundraising platform supporting donations and loans\n\nAuthentication Flow:\n1. Use 'Signup' to create a new account\n2. Use 'Login' to authenticate and get both session + JWT token automatically\n3. The JWT token is automatically saved and used for protected endpoints\n4. 'Create JWT Token' is optional - only use if you need to refresh JWT from existing session",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{JWT_TOKEN}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set content type for all requests",
          "pm.request.headers.add({key: 'Content-Type', value: 'application/json'});"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Signup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    if (jsonData.success && jsonData.data && jsonData.data.user) {",
                  "        pm.environment.set('USER_ID', jsonData.data.user.id);",
                  "        pm.environment.set('USER_EMAIL', jsonData.data.user.email);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"name\": \"Test User\",\n  \"phone\": \"+1234567890\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{API_URL}}/auth/signup",
              "host": [
                "{{API_URL}}"
              ],
              "path": [
                "auth",
                "signup"
              ]
            }
          },
          "response": [],
          "description": "Create a new user account"
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    if (jsonData.success && jsonData.data && jsonData.data.session) {",
                  "        pm.environment.set('SESSION_ID', jsonData.data.session.id);",
                  "        pm.environment.set('SESSION_SECRET', jsonData.data.session.secret);",
                  "        pm.environment.set('USER_ID', jsonData.data.session.userId);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{API_URL}}/auth/login",
              "host": [
                "{{API_URL}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": [],
          "description": "Login with email and password to create a session. Use the session details with the 'Create JWT Token' endpoint to get a JWT token for authenticated requests."
        },
        {
          "name": "Create JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('JWT token created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    if (jsonData.success && jsonData.data && jsonData.data.jwt) {",
                  "        pm.environment.set('JWT_TOKEN', jsonData.data.jwt);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sessionId\": \"{{SESSION_ID}}\",\n  \"secret\": \"{{SESSION_SECRET}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{API_URL}}/auth/jwt",
              "host": [
                "{{API_URL}}"
              ],
              "path": [
                "auth",
                "jwt"
              ]
            }
          },
          "response": [],
          "description": "[OPTIONAL] Create a JWT token from session credentials - Login now returns JWT directly"
        },
        {
          "name": "Get Account Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Account info retrieved successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{API_URL}}/auth/account",
              "host": [
                "{{API_URL}}"
              ],
              "path": [
                "auth",
                "account"
              ]
            }
          },
          "response": [],
          "description": "Get current authenticated user account information"
        }
      ],
      "description": "Authentication endpoints for user signup, login, and JWT token management"
    },
    {
      "name": "Campaigns",
      "item": [
        {
          "name": "Create Campaign",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});",
                  "",
                  "pm.test('Campaign created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.success && jsonData.data && jsonData.data.campaign) {",
                  "        pm.environment.set('CAMPAIGN_ID', jsonData.data.campaign.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Help for Medical Emergency\",\n  \"description\": \"Urgent medical treatment required for family member\",\n  \"purpose\": \"Medical\",\n  \"targetAmount\": 50000,\n  \"repaymentDueDate\": \"2025-12-31T23:59:59.999Z\",\n  \"upiId\": \"emergency@paytm\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASE_URL}}/campaigns",
              "host": ["{{BASE_URL}}"],
              "path": ["campaigns"]
            },
            "description": "Create a new fundraising campaign. Requires authentication."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{JWT_TOKEN}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Help for Medical Emergency\",\n  \"description\": \"Urgent medical treatment required\",\n  \"purpose\": \"Medical\",\n  \"targetAmount\": 50000,\n  \"repaymentDueDate\": \"2025-12-31T23:59:59.999Z\",\n  \"upiId\": \"emergency@paytm\"\n}"
                },
                "url": {
                  "raw": "{{BASE_URL}}/campaigns",
                  "host": ["{{BASE_URL}}"],
                  "path": ["campaigns"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"campaign\": {\n      \"id\": \"campaign_12345\",\n      \"title\": \"Help for Medical Emergency\",\n      \"description\": \"Urgent medical treatment required\",\n      \"purpose\": \"Medical\",\n      \"targetAmount\": 50000,\n      \"collectedAmount\": 0,\n      \"repaymentDueDate\": \"2025-12-31T23:59:59.999Z\",\n      \"upiId\": \"emergency@paytm\",\n      \"hostId\": \"user_67890\",\n      \"hostName\": \"John Doe\",\n      \"status\": \"active\",\n      \"createdAt\": \"2025-09-02T10:30:00.000Z\",\n      \"updatedAt\": \"2025-09-02T10:30:00.000Z\"\n    }\n  },\n  \"error\": null\n}"
            }
          ]
        },
        {
          "name": "Get All Campaigns",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains campaigns array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('campaigns');",
                  "    pm.expect(jsonData.data.campaigns).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/campaigns",
              "host": ["{{BASE_URL}}"],
              "path": ["campaigns"]
            },
            "description": "Get all active campaigns (public endpoint, no authentication required)"
          },
          "response": []
        },
        {
          "name": "Get My Campaigns",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains user campaigns', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('campaigns');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/campaigns?hostOnly=true",
              "host": ["{{BASE_URL}}"],
              "path": ["campaigns"],
              "query": [
                {
                  "key": "hostOnly",
                  "value": "true",
                  "description": "Get only campaigns created by authenticated user"
                }
              ]
            },
            "description": "Get campaigns created by the authenticated user"
          },
          "response": []
        }
      ],
      "description": "Campaign management endpoints"
    },
    {
      "name": "Contributions",
      "item": [
        {
          "name": "Add Contribution",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Contribution created successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    if (jsonData.data && jsonData.data.contribution) {",
                  "        pm.environment.set('CONTRIBUTION_ID', jsonData.data.contribution.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"campaignId\": \"{{CAMPAIGN_ID}}\",\n  \"contributorName\": \"Anonymous Donor\",\n  \"amount\": 1000,\n  \"utr\": \"UPI987654321\",\n  \"type\": \"donation\",\n  \"isAnonymous\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASE_URL}}/contributions",
              "host": ["{{BASE_URL}}"],
              "path": ["contributions"]
            },
            "description": "Log a contribution after UPI payment. Can be donation or loan."
          },
          "response": [
            {
              "name": "Donation Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"campaignId\": \"campaign_12345\",\n  \"contributorName\": \"Rahul Sharma\",\n  \"amount\": 1000,\n  \"utr\": \"UPI987654321\",\n  \"type\": \"donation\",\n  \"isAnonymous\": false\n}"
                },
                "url": {
                  "raw": "{{BASE_URL}}/contributions",
                  "host": ["{{BASE_URL}}"],
                  "path": ["contributions"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"contribution\": {\n      \"id\": \"contribution_abc123\",\n      \"campaignId\": \"campaign_12345\",\n      \"contributorId\": null,\n      \"contributorName\": \"Rahul Sharma\",\n      \"amount\": 1000,\n      \"utr\": \"UPI987654321\",\n      \"type\": \"donation\",\n      \"isAnonymous\": false,\n      \"isRepaid\": false,\n      \"createdAt\": \"2025-09-02T10:45:00.000Z\"\n    },\n    \"campaign\": {\n      \"collectedAmount\": 1000,\n      \"status\": \"active\"\n    }\n  },\n  \"error\": null\n}"
            }
          ]
        },
        {
          "name": "Add Loan Contribution",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Loan contribution created', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.contribution.type).to.equal('loan');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"campaignId\": \"{{CAMPAIGN_ID}}\",\n  \"contributorName\": \"Priya Singh\",\n  \"amount\": 2500,\n  \"utr\": \"UPI445566778\",\n  \"type\": \"loan\",\n  \"isAnonymous\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASE_URL}}/contributions",
              "host": ["{{BASE_URL}}"],
              "path": ["contributions"]
            },
            "description": "Log a loan contribution. Will inherit repayment due date from campaign."
          },
          "response": []
        },
        {
          "name": "Mark Loan as Repaid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Loan marked as repaid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.contribution.isRepaid).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/contributions/{{CONTRIBUTION_ID}}/repaid",
              "host": ["{{BASE_URL}}"],
              "path": ["contributions", "{{CONTRIBUTION_ID}}", "repaid"]
            },
            "description": "Mark a loan contribution as repaid. Only campaign host can do this."
          },
          "response": [
            {
              "name": "Repaid Success",
              "originalRequest": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{JWT_TOKEN}}"
                  }
                ],
                "url": {
                  "raw": "{{BASE_URL}}/contributions/contribution_abc123/repaid",
                  "host": ["{{BASE_URL}}"],
                  "path": ["contributions", "contribution_abc123", "repaid"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"contribution\": {\n      \"id\": \"contribution_abc123\",\n      \"isRepaid\": true,\n      \"repaidAt\": \"2025-09-02T11:00:00.000Z\"\n    }\n  },\n  \"error\": null\n}"
            }
          ]
        }
      ],
      "description": "Contribution management endpoints"
    }
  ],
  "variable": [
    {
      "key": "API_URL",
      "value": "https://your-function-url.appwrite.run",
      "description": "Your Appwrite Function URL"
    },
    {
      "key": "BASE_URL",
      "value": "https://your-function-url.appwrite.run",
      "description": "Your Appwrite Function URL (legacy variable)"
    },
    {
      "key": "USER_ID",
      "value": "",
      "description": "User ID from signup/login"
    },
    {
      "key": "USER_EMAIL",
      "value": "",
      "description": "User email for testing"
    },
    {
      "key": "SESSION_ID",
      "value": "",
      "description": "Session ID from login"
    },
    {
      "key": "SESSION_SECRET",
      "value": "",
      "description": "Session secret from login"
    },
    {
      "key": "JWT_TOKEN",
      "value": "",
      "description": "JWT authentication token from JWT creation endpoint"
    },
    {
      "key": "CAMPAIGN_ID",
      "value": "",
      "description": "Campaign ID for testing contributions"
    },
    {
      "key": "CONTRIBUTION_ID",
      "value": "",
      "description": "Contribution ID for testing repayment"
    }
  ]
}